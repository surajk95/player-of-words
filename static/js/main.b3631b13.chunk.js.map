{"version":3,"sources":["components/mobile-no-access/mobile screen.svg","components/input.js","components/score.js","components/mobile-no-access/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","state","word","handleChange","event","target","value","includes","setState","handleSubmit","preventDefault","trim","props","addWord","onSubmit","this","placeholder","onChange","autoFocus","React","Component","Score","className","score","speed","Mobile","src","NoAccess","alt","App","errorMessage","error","words","suffix","suffixes","startTime","Date","resetState","changeSuffix","toLowerCase","endsWith","trie","startTimer","endTimer","timeDiff","Math","round","then","Dictionary","dictionary","default","item","push","createDictionary","title","map","index","key","type","name","checked","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3631b13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mobile screen.87c15afc.svg\";","import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n    state = {\r\n        word: ''\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if(!event.target.value.includes(' '))\r\n            this.setState({ word: event.target.value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.word.trim() !== '') {\r\n            this.props.addWord(this.state.word);\r\n            this.setState({ word: '' });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        placeholder=\"Start typing here\"\r\n                        value={this.state.word}\r\n                        onChange={this.handleChange}\r\n                        autoFocus\r\n                    />\r\n                </form>\r\n            </>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nexport default function Score(props) {\r\n    return (\r\n        <div className=\"scoreContainer\">\r\n            <span className=\"score\">\r\n                {props.score}\r\n            </span>\r\n            &nbsp;\r\n            <span className=\"speed\">\r\n                at {props.speed} words per minute\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport NoAccess from './mobile screen.svg';\r\nimport './index.css';\r\n\r\nexport default function Mobile() {\r\n    return (\r\n        <div className=\"mobileContainer\">\r\n            <img src={NoAccess} alt=\"no access\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport createDictionary from 'dictionary-trie'\r\nimport words from './words_dictionary.json';\r\n\r\nimport Input from './components/input';\r\nimport Score from './components/score';\r\n\r\nimport MobileContainer from './components/mobile-no-access';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    errorMessage: '',\r\n    error: false,\r\n    words: [],\r\n    score :0,\r\n    suffix: 'tion',\r\n    suffixes: [\r\n      'tion',\r\n      'sion',\r\n      'ous',\r\n      'er',\r\n      'ment',\r\n    ],\r\n    startTime: new Date(),\r\n    speed: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    import(`./words_dictionary.json`)\r\n    .then(( Dictionary ) => {\r\n      let dictionary = Dictionary.default;\r\n      let words = [];\r\n      for(let item in dictionary) {\r\n        words.push(item);\r\n      }\r\n      this.setState({ trie: createDictionary(words) });\r\n      //console.log(`dictionary`, words[100]);\r\n    });\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState({\r\n      score: 0,\r\n      speed: 0,\r\n      words: [],\r\n      error: false,\r\n      errorMessage: ''\r\n    });\r\n  }\r\n  changeSuffix = (value) => {\r\n    this.setState({ suffix: value });\r\n    this.resetState();\r\n  }\r\n\r\n  addWord = (word) => {\r\n    //console.log(this.state.trie);\r\n    if(!word.toLowerCase().endsWith(this.state.suffix)) {\r\n      this.setState({ error: true, errorMessage: `Word does not end with ${this.state.suffix}`});\r\n    }\r\n    else if(this.state.words.includes(word)) {\r\n      this.setState({ error: true, errorMessage: `You have already entered that.`});\r\n    }\r\n    else if(!this.state.trie.includes(word)) {\r\n      this.setState({ error: true, errorMessage: `Not an English word.`});\r\n    }\r\n    else {\r\n      if(this.state.score === 0)\r\n        this.startTimer();\r\n      else\r\n        this.endTimer();\r\n      this.setState({ error: false, score: this.state.score+1, words: [...this.state.words, word]});\r\n    }\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.setState({ startTime: new Date() });\r\n  };\r\n  \r\n  endTimer = () => {\r\n    if(this.state.score === 0)\r\n      return; \r\n    let endTime = new Date();\r\n    var timeDiff = endTime - this.state.startTime; //in ms\r\n    //Strip the ms, convert to minutes.\r\n    timeDiff /= 1000*60;\r\n    let speed = Math.round(this.state.score/timeDiff, 3);\r\n    //console.log(speed);\r\n    this.setState({ speed });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <MobileContainer />\r\n        <div className=\"header\">\r\n          PLAYER OF WORDS\r\n        </div>\r\n        <div className=\"mode\">\r\n          <div className=\"item\" title=\"future release\">single player</div>\r\n          <div className=\"item active\">zen</div>\r\n          <div className=\"item multi\" title=\"future release\">multiplayer</div>\r\n        </div>\r\n        <div className=\"subtitle\">\r\n          <div className=\"suffix\">\r\n          Enter words ending with&nbsp;&nbsp;\r\n            {\r\n              this.state.suffixes.map((item, index) => {\r\n                return (\r\n                <span key={index} className={this.state.suffix===item ? 'activeSuffix' : ''}>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"suffix\"\r\n                    checked={this.state.suffix==item}\r\n                    onChange={()=>this.changeSuffix(item)}\r\n                  />\r\n                  {item}\r\n                </span>\r\n              )})\r\n            }\r\n\r\n          </div>\r\n        </div>\r\n        <button className=\"reset\" onClick={this.resetState}>\r\n          Reset\r\n        </button>\r\n        <Input addWord={this.addWord} />\r\n        <div className=\"errorMessage\">\r\n          {\r\n            this.state.error &&\r\n            this.state.errorMessage\r\n          }\r\n         </div>\r\n        <Score\r\n          score={this.state.score}\r\n          speed={this.state.speed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}