{"version":3,"sources":["components/input.js","components/score.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","word","handleChange","event","target","value","includes","setState","handleSubmit","preventDefault","trim","props","addWord","onSubmit","this","placeholder","onChange","autoFocus","type","onClick","React","Component","Score","className","score","speed","App","errorMessage","error","words","suffix","suffixes","startTime","Date","resetState","changeSuffix","toLowerCase","endsWith","startTimer","endTimer","timeDiff","Math","round","map","item","index","key","name","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e09c7a3e.chunk.js","sourcesContent":["import React from 'react';\n\nclass Input extends React.Component {\n    state = {\n        word: ''\n    }\n\n    handleChange = (event) => {\n        if(!event.target.value.includes(' '))\n            this.setState({ word: event.target.value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if(this.state.word.trim() !== '') {\n            this.props.addWord(this.state.word);\n            this.setState({ word: '' });\n        }\n    }\n\n    render () {\n        return (\n            <>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        placeholder=\"Type here\"\n                        value={this.state.word}\n                        onChange={this.handleChange}\n                        autoFocus\n                    />\n                    <button type=\"submit\" onClick={this.handleSubmit}>\n                        &#10003;\n                    </button>\n                </form>\n            </>\n        )\n    }  \n}\n\nexport default Input;","import React from 'react';\n\nexport default function Score(props) {\n    return (\n        <div className=\"scoreContainer\">\n            Score:\n            <span className=\"score\">\n                {props.score}\n            </span>\n            &nbsp;\n            <span className=\"speed\">\n                at {props.speed} words/second.\n            </span>\n        </div>\n    )\n}","import React from 'react';\n\nimport Input from './components/input';\nimport Score from './components/score';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  state = {\n    errorMessage: '',\n    error: false,\n    words: [],\n    score :0,\n    suffix: 'tion',\n    suffixes: [\n      'tion',\n      'sion',\n      'ous',\n      'er',\n      'ment',\n    ],\n    startTime: new Date(),\n    speed: 0\n  }\n\n  resetState = () => {\n    this.setState({\n      score: 0,\n      speed: 0,\n      words: [],\n      error: false,\n      errorMessage: ''\n    });\n  }\n  changeSuffix = (value) => {\n    this.setState({ suffix: value });\n    this.resetState();\n  }\n\n  addWord = (word) => {\n    if(!word.toLowerCase().endsWith(this.state.suffix)) {\n      this.setState({ error: true, errorMessage: `Word does not end with ${this.state.suffix}`});\n    }\n    else if(this.state.words.includes(word)) {\n      this.setState({ error: true, errorMessage: `You have already entered that.`});\n    }\n    else {\n      if(this.state.score === 0)\n        this.startTimer();\n      else\n        this.endTimer();\n      this.setState({ error: false, score: this.state.score+1, words: [...this.state.words, word]});\n    }\n  }\n\n  startTimer = () => {\n    this.setState({ startTime: new Date() });\n  };\n  \n  endTimer = () => {\n    if(this.state.score === 0)\n      return; \n    let endTime = new Date();\n    var timeDiff = endTime - this.state.startTime; //in ms\n    //Strip the ms, convert to minutes.\n    timeDiff /= 1000*60;\n    let speed = Math.round(this.state.score/timeDiff, 3);\n    //console.log(speed);\n    this.setState({ speed });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          Word Play\n        </div>\n        <div className=\"subtitle\">\n          Enter words ending with&nbsp;\n          <div className=\"suffix\">\n            {\n              this.state.suffixes.map((item, index) => {\n                return (\n                <span key={index}>\n                  <input\n                    type=\"radio\"\n                    name=\"suffix\"\n                    checked={this.state.suffix==item}\n                    onChange={()=>this.changeSuffix(item)}\n                  />\n                  {item}\n                </span>\n              )})\n            }\n\n          </div>\n        </div>\n        <button onClick={this.resetState}>\n          Reset\n        </button>\n        <Input addWord={this.addWord} />\n        <div className=\"errorMessage\">\n          {\n            this.state.error &&\n            this.state.errorMessage\n          }\n         </div>\n        <Score\n          score={this.state.score}\n          speed={this.state.speed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}